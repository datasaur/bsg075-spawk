#!/bin/sh
#
# SPAWK
# =====
# Using `spawk' shell script can simplify the awk command line.
# We can specify multiple awk script files (-f option) and
# combine with multiple one-liners (-s option) to construct
# a final awk script to run. The files specified with -f option
# may lie in directories specified with the `AWKPATH'
# environment variable just like shell uses `PATH' environment
# variable.
#
# We can also set variables using -v for string valued variables
# and -n for number valued variables, e.g. -v panos="Hello world"
# constructs the `panos' variable with value "Hello world", and
# -n maria=128 constructs the `maria' variable with value of 128.
#
# With -l option we can specify gawk extension libraries to be loaded,
# e.g. -l libspawk means to load "libspawk.so" extension library
# (of course the "dlload" function). Extension libraries specified
# via -l option are loaded at the very begining of the final awk script.
# The SPAWK extension library module can be loaded with -l libspawk,
# or by simply using the -S option.
#
# We can include awk "libraries" using "#@" directives in spawk scripts.
# If a line begins with the "#@" directive, then the rest of the line
# is considered an awk script file name. If the name begins with "/",
# then it's considered an absolute path name, else the environment
# variable `SPAWK_LIBRARY_PATH' comes into play. This variable plays
# the same role played by the shell environment variable `LIBRARY_PATH'
# to the linker (ld, gcc). Awk script files specified with the "#@"
# directives usually contain awk functions, but there is no restriction
# on that; so these "libraries" may contain `BEGIN', 'END' or any
# other valid awk section. However, you must keep in mind, that these
# "libraries" will be written to the beging of the final awk script.
#
# We can check the resulting awk script using -C option. If neither
# -f not -s options specified, then a dummy awk program copies its
# input to the output.

# Some housekeeping. Set program's name, usage messages etc.
progname=`basename $0`
usage_message="usage: ${progname} [options] [files...]"

# Error flags to be used when parsing the command line.
errs_usage=
errs_other=

# Construct the temporary awk script filename. Take care of this
# file not to be left over after program exits.
if [ -n "${TMPDIR}" ]; then
	tmpdir="${TMPDIR}"
	case "${tmpdir}" in
	*/)
		;;
	*)
		tmpdir="${tmpdir}/"
		;;
	esac
elif [ -d /usr/tmp ]; then
	tmpdir="/usr/tmp/"
else
	tmpdir="/tmp/"
fi

if [ ! -d ${tmpdir} ]; then
	echo "${progname}: ${tmpdir}: no such directory" >&2
	exit 2
fi

if [ ! -w ${tmpdir} ]; then
	echo "${progname}: ${tmpdir}: invalid directory" >&2
	exit 2
fi

tmp1="${tmpdir}spawk$$.1"
tmp2="${tmpdir}spawk$$.2"
if [ -f ${tmp1} -o -f ${tmp2} ]; then
	rm -f ${tmp1} ${tmp2} || exit 2
fi
unset tmpdir

cleanup() {
	[ -f ${tmp1} -o -f ${tmp2} ] && rm -f ${tmp1} ${tmp2}
	case $# in
	0)
		;;
	1)
		exit $1
		;;
	*)
		echo "${progname}: internal error (cleanup usage)" >&2
		exit 2
		;;
	esac
}
trap "cleanup 3" 1 2 3 15

usage() {
	echo "${usage_message}
       ${progname} -h (for full options' list)" >&2
	cleanup 1
}

tmp_message() {
	[ -s ${tmp1} ] || echo "# [[SPAWK]] TEMPORARY FILE: \
${tmp1}" >${tmp1}
	echo -en "# [[SPAWK]] COMMAND LINE: $@" >>${tmp1}
}

# Function `append' is used to add the contents of the files
# specified with -f option to the final awk script. If the
# file name is an absolute pathname, then the file is just
# copied.
append() {
	if [ $# -ne 1 ]; then
		echo "${progname}: internal error (append usage)" >&2
		exit 2
	fi

	awk -v file="${1}" 'BEGIN {
	if ((file ~ /^\//) || (file ~ /^\.\//) || (file ~ /^\.\.\//))
		exit(append_script(file, 1))

	if ((n = split(ENVIRON["AWKPATH"], dir, ":")) > 0) {
		for (i = 1; i <= n; i++) {
			if (dir[i] ~ /\/$/)
				script = dir[i] file
			else if (dir[i])
				script = dir[i] "/" file
			else
				script = file

			if (!append_script(script, 0))
				exit(0)
		}
	}

	exit(append_script(file, 1))
}

function append_script(script, msg,			stat, x) {
	while ((stat = (getline x <script)) > 0)
		print x

	if (stat >= 0) {
		close(script)
		return(0)
	}

	if (msg)
		print script ": " ERRNO >"/dev/stderr"

	return(1)
}' >>${tmp1}
}

# Parse the command line arguments and construct the final awk
# awk script accordingly.
check1=
check2=
extlib=

while getopts ":f:s:v:n:l:ScCh" arg
do
	case "${arg}" in
	h)
		echo "${usage_message}

Options
-------
-h (full options' list)
-f script_file
-s script_string
-v variable[=string_value]
-n variable[=number_value]
-l library (loads extension library)
-S (load SPAWK extension library (same as -l libspawk.so))
-c (print final script (without included libraries) and exit)
-C (print final script and exit)" >&2
		exit 0
		;;
	f)
		tmp_message "-f ${OPTARG}\n"
		append "${OPTARG}" || errs_other=yes
		;;
	s)
		tmp_message "-s\n${OPTARG}\n"
		;;
	v)
		tmp_message "-v ${OPTARG}\nBEGIN {\n\t"
		case "${OPTARG}" in
		*=*)
			echo "${OPTARG}" | sed 's;=; = ";
s;$;";' >>${tmp1}
			;;
		*)
			echo "${OPTARG}" | sed 's;$; = "";' >>${tmp1}
			;;
		esac
		echo "}" >>${tmp1}
		;;
	n)
		tmp_message "-n ${OPTARG}\nBEGIN {\n\t"
		case "${OPTARG}" in
		*=)
			echo "${OPTARG}" | sed 's;=$; = 0;' >>${tmp1}
			;;
		*=*)
			echo "${OPTARG}" | sed 's;=; = ";
s;$;" + 0;' >>${tmp1}
			;;
		*)
			echo "${OPTARG}" | sed 's;$; = 0;' >>${tmp1}
			;;
		esac
		echo "}" >>${tmp1}
		;;
	l)
		extlib="${extlib}:${OPTARG}"
		;;
	S)
		extlib="${extlib}:libspawk"
		;;
	c)
		check1=yes
		;;
	C)
		check2=yes
		;;
	\?)
		echo "${progname}: invalid option -- ${OPTARG}" >&2
		errs_usage=yes
		;;
	esac
done
[ -n "${errs_usage}" ] && usage
[ -n "${errs_other}" ] && cleanup 2
shift `expr ${OPTIND} - 1`

# Given the -c option we can check the final awk script without
# runing it BEFORE library inclusion. This procedure is very useful
# in debuging.
if [ -n "${check1}" ]; then
	if [ -s ${tmp1} ]; then
		cat ${tmp1}
	else
		echo "${progname}: script empty" >&2
	fi
fi

# Now it's time to check for library inclusion. All "#@" directives
# will now be resolved. `SPAWK_LIBRARY_PATH' environment variable
# will come into play. Also, all extension libraries will be
# loaded at the very begining.
if [ -s ${tmp1} ]; then
	awk -v extlib="${extlib}" 'BEGIN {
	if ((n = split(extlib, lib, ":")) > 1) {
		print "BEGIN {"
		for (i = 2; i <= n; i++)
			print "\textension(\"" lib[i] ".so\", " \
				"\"dlload\")"

		print "}"
	}

	n = split(ENVIRON["SPAWK_LIBRARY_PATH"], dir, ":")
}

function copy_library(lib,			stat, x) {
	while ((stat = (getline x <lib)) > 0)
		print x

	if (stat < 0)
		return(0)

	close(lib)
	return(1)
}

function no_library() {
	print $0 ": library not found" >"/dev/stderr"
	errs++
}

$0 ~ /^[ \t]*#@/ {
	sub("[ \t]*#@[ \t]*", "")
	sub("[ \t]*$", "")
	if ($0 == "")
		next

	print "# [[SPAWK]] LIBRARY INCLUSION: " $0
	if ((n <= 0) || ($0 ~ /^\//)) {
		if (!copy_library($0))
			no_library()

		next
	}

	for (i = 1; i <= n; i++) {
		if (dir[i] ~ /\/$/)
			library = dir[i] $0
		else if (dir[i])
			library = dir[i] "/" $0
		else
			library = $0

		if (copy_library(library))
			next
	}

	no_library()
	next
}

{
	print
}

END {
	exit(errs + 0)
}' ${tmp1} >${tmp2} || cleanup 2
fi

# Given the -C option we can check the final awk script without
# runing it AFTER library inclusion. This procedure is very useful
# in debuging.
if [ -n "${check2}" ]; then
	if [ -s ${tmp2} ]; then
		cat ${tmp2}
	else
		echo "${progname}: final script empty" >&2
	fi
fi
[ -n "${check1}" -o -n "${check2}" ] && cleanup 0

# Now is the time to run the final awk script. If the script
# is empty, then just run awk to read input and print it back.
if [ -s ${tmp2} ]; then
	awk -f ${tmp2} "$@"
	cleanup $?
fi

cleanup
exec awk '{ print }' "$@"
